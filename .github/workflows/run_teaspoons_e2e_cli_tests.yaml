name: run-teaspoons-cli-e2e-tests

on:
  workflow_call:
    inputs:
      bee-name:
        description: 'BEE name'
        required: true
        type: string
      billing-project-name:
        description: 'Name of billing project to create and use for workspace'
        required: true
        type: string
      e2e-test-version-ref:
        description: 'Name of branch or commit hash in this repo to use'
        required: true
        type: string
      cli-version-ref:
        description: 'Name of branch or version (semantic tag) of terralab cli to use'
        required: true
        type: string
      wdl-method-version:
        description: 'Version (git tag or branch from service repo) of WDL to use'
        required: true
        type: string

jobs:
  run-e2e-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout dsp-reusable-workflows"
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.e2e-test-version-ref }}
          repository: broadinstitute/dsp-reusable-workflows
          path: dsp-reusable-workflows/
      
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install test dependencies
        run: |
          cd dsp-reusable-workflows/e2e-test/resources/teaspoons/
          pip install -r requirements.txt
      
      - name: Checkout cli repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.cli-version-ref }}
          repository: DataBiosphere/terra-scientific-pipelines-service-cli
          path: terra-scientific-pipelines-service-cli/
      
      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Generate OAuth2 2.0 access token for Terra user
        id: 'obtain_user_token'
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'firecloud-qa@broad-dsde-qa.iam.gserviceaccount.com'
          access_token_scopes: 'profile, email, openid'
          access_token_subject: 'hermione.owner@quality.firecloud.org'
          export_environment_variables: false
      
      - name: Generate OAuth2 2.0 access token for admin user and billing project owner
        id: 'obtain_admin_user_token'
        uses: google-github-actions/auth@v1
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'firecloud-qa@broad-dsde-qa.iam.gserviceaccount.com'
          access_token_scopes: 'openid, https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/userinfo.profile, https://www.googleapis.com/auth/cloud-billing'
          access_token_subject: 'dumbledore.admin@quality.firecloud.org'
          export_environment_variables: false
      
      - name: Setup Teaspoons resources
        id: 'setup-resources'
        env:
          BEE_NAME: ${{ inputs.bee-name }}
          BILLING_PROJECT_NAME: ${{ inputs.billing-project-name }}
          BILLING_ACCOUNT_NAME: 'billingAccounts/00708C-45D19D-27AAFA'
          ADMIN_TOKEN: ${{ steps.obtain_admin_user_token.outputs.access_token }}
          WDL_METHOD_VERSION: ${{ inputs.wdl-method-version }}
        run: |
          cd dsp-reusable-workflows/

          # this will export an environment variable WORKSPACE_NAME that will be used in the cleanup step
          python e2e-test/teaspoons_gcp_cli_e2e_test_setup.py
        
      - name: Run e2e test with CLI
        id: 'run-cli-e2e-test'
        env: 
          BEE_NAME: ${{ inputs.bee-name }}
          USER_TOKEN: ${{ steps.obtain_user_token.outputs.access_token }}
        run: |
          cd terra-scientific-pipelines-service-cli/
          poetry install
          
          echo "CONFIGURING CLI"
          CONFIG_FILE=$(poetry run python -c "import terralab; print(terralab.__file__.replace('__init__.py','.terralab-cli-config'))")
          echo "found config file at $CONFIG_FILE"
          ls $CONFIG_FILE
          TEASPOONS_API_URL="https://teaspoons.$BEE_NAME.bee.envs-terra.bio"
          sed -i -e "s|^TEASPOONS_API_URL=.*|TEASPOONS_API_URL=$TEASPOONS_API_URL|" $CONFIG_FILE
          cat $CONFIG_FILE | grep TEASPOONS_API_URL

          echo "RUNNING CLI TEST"
          poetry run terralab -h
          poetry run terralab --debug login-with-oauth $USER_TOKEN

          touch input_file.vcf.gz
          OUTPUT_BASENAME="test"
          SUBMIT_OUTPUT=$(poetry run terralab submit array_imputation --inputs '{"multiSampleVcf": "input_file.vcf.gz", "outputBasename": "$OUTPUT_BASENAME"}')
          JOB_ID = $(echo $SUBMIT_OUTPUT | tail -n1 | grep -o '[0-9a-f]\{8\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{12\}$')
          echo "created job with ID $JOB_ID"

          TEST_SUCCESS="True"
          while true; do
              STATUS=$(poetry run terralab jobs details $JOB_ID | head -n1 | grep -oP '(?<=Status: ).*')
              if [ "$STATUS" == "Succeeded" ]; then
                  echo "Job succeeded!"

                  poetry run terralab download $JOB_ID

                  for expected_file in "$OUTPUT_BASENAME.imputed.vcf.gz" "$OUTPUT_BASENAME.imputed.vcf.gz.tbi" "${OUTPUT_BASENAME}_chunk_info.tsv"; do
                      echo "Checking for presence of $expected_file"
                      if [ -f $expected_file ]; then
                          echo "$expected_file exists"
                      else
                          echo "$expected_file does not exist"
                          TEST_SUCCESS="False"
                          break
                      fi
                  done
                  
                  break
              elif [ "$STATUS" == "Failed" ]; then
                  echo "Job failed."
                  # get details including error message
                  poetry run terralab jobs details $JOB_ID
                  TEST_SUCCESS="False"
                  break
              else
                  echo "Current status: $STATUS. Waiting for 1 minute before checking again..."
                  sleep 60
              fi
          done

      - name: Clean up Teaspoons resources
        env:
          BEE_NAME: ${{ inputs.bee-name }}
          BILLING_PROJECT_NAME: ${{ inputs.billing-project-name }}
          ADMIN_TOKEN: ${{ steps.obtain_admin_user_token.outputs.access_token }}
        run: |
          cd dsp-reusable-workflows/

          WORKSPACE_NAME="teaspoons-cli-e2e-$BEE_NAME"
          echo "CLEANING UP RESOURCES"
          python e2e-test/teaspoons_gcp_cli_e2e_test_cleanup.py

          if [ "$TEST_SUCCESS" == "False" ]; then
            echo "e2e test failed (waited till after cleanup to fail the workflow)"
            exit(1)
          fi
